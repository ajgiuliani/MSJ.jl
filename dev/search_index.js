var documenterSearchIndex = {"docs":
[{"location":"misc/#Miscellaneous-1","page":"Miscellaneous","title":"Miscellaneous","text":"","category":"section"},{"location":"misc/#Logo-1","page":"Miscellaneous","title":"Logo","text":"","category":"section"},{"location":"misc/#","page":"Miscellaneous","title":"Miscellaneous","text":"","category":"page"},{"location":"misc/#","page":"Miscellaneous","title":"Miscellaneous","text":"Code used to generate the msJlogo. ","category":"page"},{"location":"misc/#","page":"Miscellaneous","title":"Miscellaneous","text":"using Plots\ngr()\n\n@. model(x, p) = p[4] + p[3] * exp(- ( (x-p[2])/p[1] )^2)\n\nx1 = range(-7.5, stop=-2.5, length=100)\np1 = [1, -5, 1, 0]\ny1 = model(x1,p1);\nplot(x1,y1, color = RGBA(0.884, 0.2, 0.2), fillrange = 0, fillalpha = 0.9, label = \"\", \n\tthickness_scaling = 2.0, \n    xaxis=nothing,\n    yaxis=nothing,\n    background_color=:transparent, foreground_color=:black,)\n\nx2 = range(-2.5, stop=2.5, length=100)\np2 = [1, 0, 2, 0]\ny2 = model(x2, p2)\nplot!(x2,y2, color= RGBA(0.22, 0.596, 0.149), fillrange = 0, fillalpha = 0.9, label = \"\")\n\nx3 = range(2.5, stop=7.5, length=100)\np3 = [1, 5, 1, 0]\ny3 = model(x3,p3)\nplot!(x3,y3,color = RGBA(0.584, 0.345, 0.608), fillrange = 0, fillalpha = 0.9, label = \"\")\n\nx4 = range(-17.5, stop=-12.5, length=100)\np4 = [1, -15, 1, 0]\ny4 = model(x4,p4);\nplot!(x4,y4, color = RGBA(0.255, 0.412, 0.882), fillrange = 0, fillalpha = 0.9, label = \"\")\n\nsavefig(\"docs/src/assets/logo.png\")","category":"page"},{"location":"misc/#","page":"Miscellaneous","title":"Miscellaneous","text":"(Image: logo)","category":"page"},{"location":"manual/#Manual-1","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/#Introduction-1","page":"Manual","title":"Introduction","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The MSJ package aims at providing an API to the most common file format in mass spectrometry. The following file formats are currently supported:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"mzXML ","category":"page"},{"location":"manual/#Public-elements-1","page":"Manual","title":"Public elements","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The functions below are exported:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"info \nload \nchromatogram\naverage\nbaseline_correction\nextract\ncentroid\nsmooth\nisotopic_distribution\nmasses\nsimulate","category":"page"},{"location":"manual/#Data-types-1","page":"Manual","title":"Data types","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The main data type of the package is the abstract type MSJ.MScontainer.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Mass spectrometry scans are stored in the following structures, inspired from the mzXML format, which is a subtype of MSJ.MScontainer. ","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"struct MSscan <: MScontainer\n    num::Int                          # num\n    rt::Float64                       # retentionTime\n    tic::Float64                      # totIonCurrent\n    mz::Vector{Float64}               # m/z\n    int::Vector{Float64}              # intensity\n    level::Int                        # msLevel\n    basePeakMz::Float64               # basePeakMz\n    basePeakIntensity::Float64        # basePeakIntensity\n    precursor::Float64                # precursorMz\n    polarity::String                  # polarity\n    activationMethod::String          # activationMethod\n    collisionEnergy::Float64          # collisionEnergy\nend","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Another subtype, MSJ.Chromatogram, is used to store the retention time, the ionic current and the maximum value of the ion current.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"struct Chromatogram  <: MScontainer\n    rt::Vector{Float64}               # araay of retention times\n    ic::Vector{Float64}               # array of ion current\n    maxic::Float64                    # maximum ion current (used in plotting normalization)\nend","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Combination of mass spectra requires another subtype of MSJ.MScontainer called MSJ.MSscans (notice the ending s).","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"struct MSscans  <: MScontainer\n    num::Vector{Int}                  # num\n    rt::Vector{Float64}               # retentionTime\n    tic::Float64                      # totIonCurrent\n    mz::Vector{Float64}               # m/z\n    int::Vector{Float64}              # intensity\n    level::Vector{Int}                # msLevel\n    basePeakMz::Float64               # basePeakMz\n    basePeakIntensity::Float64        # basePeakIntensity\n    precursor::Vector{Float64}        # precursorMz\n    polarity::Vector{String}          # polarity\n    activationMethod::Vector{String}  # activationMethod\n    collisionEnergy::Vector{Float64}  # collisionEnergy\n    s::Vector{Float64}                # variance\nend","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The MSJ.MSscans structure is very similar to the MSJ.MSscan one, except that the fields num, rt, precursor, polarity, activationMethod and collisionEnergy are vectors. The idea is to keep track of the history of the operations that have led to this result. For example, if a MSscans element is the result of the addition of two individual scans such as scans[1] + scans[2], then the numfield of resulting MSscans is an array [1, 2]. The same applies to the retention time, precursor m/z, polarity, activation method and collision energy fields.","category":"page"},{"location":"manual/#Information-1","page":"Manual","title":"Information","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The info public function reads the content of a file, but without loading the mass spectrometry data, and returns a Vector{String}containing the number of scans, scans level and for MS/MS data, the precursor m/z, the activation method and energy. Additional information may be gained by setting verbose = true.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"info(filename)\n4-element Array{String,1}:\n \"51 scans\"\n \"MS1+\"\n \"MS2+ 1255.5  CID(CE=18)\"\n \"MS3+ 902.33  PQD(CE=35)\"","category":"page"},{"location":"manual/#Importing-data-1","page":"Manual","title":"Importing data","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"When loading a file containing more than a single acquisition, the individual mass spectrometry scans are pushed into an array of MSJ.MSscan.  The individual scans may be retrieve from the array the usual way:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"julia> scans = load(\"filename\")\n51-element Array{MSJ.MSscan,1}:\n MSJ.MSscan(1, 0.1384, 5.08195e6, [140.083, 140.167, 140.25, 140.333, 140.417, 140.5, 140.583, 140.667, 140.75, 140.833  …  1999.25, 1999.33, 1999.42, ....)\n...\n\njulia> scans[1]\nMSJ.MSscan(1, 0.1384, 5.08195e6, [140.083, 140.167, 140.25, 140.333, 140.417, 140.5, 140.583, 140.667, 140.75, 140.833  …  1999.25, 1999.33, 1999.42, ....)","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"As mentioned above, chromatograms may be retrieved from a file and imported in MSJ.Chromatogram :","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"julia> chromatogram(\"filename\")\nMSJ.Chromatogram([0.1384, 0.7307, 2.1379, 3.7578, 4.3442, 5.7689], [5.08195e6, 9727.2, 11.3032, 4.8084e6, 12203.5, 4.84455], 5.08195e6)","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The function MSJ.retention_time reads the retention time of an input file and returns a Vector{Float64}containing the time in seconds.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"julia> MSJ.retention_time(\"filename\")\n51-element Array{Float64,1}:\n  0.1384\n  0.7307\n  2.1379\n....MSJ.FilterType\n","category":"page"},{"location":"manual/#Exporting-data-1","page":"Manual","title":"Exporting data","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"note: Note\nThis feature is currently under development. ","category":"page"},{"location":"manual/#Combining-and-filtering-data-1","page":"Manual","title":"Combining and filtering data","text":"","category":"section"},{"location":"manual/#Average-1","page":"Manual","title":"Average","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The average returns the average of the mass spectra directly from a Vector{MSscan} after Importing data data or directly from the filename.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"julia> average(\"filename\")\nMSJ.MSscans([1, 2, 3 ....\n\njulia> scans = load(\"filename\")\n51-element Array{MSJ.MSscan,1}:\n MSJ.MSscan(1, 0.1384, 5.08195e6, [140.083, 140.167, 140.25, 140.333, 140.417, 140.5, 140.583, 140.667, 140.75, 140.833  …  1999.25, 1999.33, 1999.42, ....)\n...\n\njulia> average(scans)\nMSJ.MSscans([1, 2, 3 ....\n","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Operating on files takes more time than working on Vector{MSscan} but may be useful to reduce the memory load.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Without any argument the average function averages the entire content of the data and the chromatogram function operates on also on the entire data.","category":"page"},{"location":"manual/#Filtering-1","page":"Manual","title":"Filtering","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The average and chromatogram functions may takes arguments to select specific fields of interest within the data and operate on them. The argument belongs to the MSJ.FilterType. Their properties are listed below:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"FilterType Description Arguments Specificity\nMSJ.Scan Scan num Int, Vector{Int} average, chromatogram\nMSJ.Level MS level Int, Vector{Int} average, chromatogram\nMSJ.Polarity Polarity String, Vector{String} average, chromatogram\nMSJ.Activation_Method Activation method String, Vector{String} average, chromatogram\nMSJ.Activation_Energy Activation energy Real, Vector{Real} average, chromatogram\nMSJ.Precursor Precursor m/z Real, Vector{Real} average, chromatogram\nMSJ.RT Retention time Real, Vector{Real}, Vector{Vector{Real}} average\nMSJ.IC Ion current Vector{Real} average","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"note: Note\nThe filtering function goes first through all the arguments and setup an array of scan num that matches the conditions. Then it uses this array to calculate the average mass spectrum.  So this procedure needs two passes through the data, which is not very efficient. This is a point to make better in the future.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"When the argument is restricted to a single value, such as MSJ.Scan(1), filtering is performed on that specific value. If the argument is a vector then filtering involves all the values within the range.  Filtering on MSJ.scan([1,10]) means that the result will be obtained for scans ranging from 1 to 10.  The same applies for all FilterType with the exception of MSJ.∆MZ, for which the first value of the vector represents the mz and the second value represents the spread ∆mz, so that filtering is operated for all mz value in the range [m/z - ∆mz , m/z + ∆mz].  The MSJ.RT type may take a vector or vectors as argument, such `MSJ.RT([ [1,10], [20, 30] ]).  In that case, mass spectra will be averaged in [1,10] and [20,30] range.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"These filters may be combined together if necessary. For example, the input below returns the average mass spectrum for:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"the MS2 scans (level = 2), \nprecursor m/z 1255.5, \nupon CID activation conditions\nwith an activation energy of 18 \nand for retention times in the 1 to 60 s range.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"average(\"filename\", MSJ.Precursor(1255.5),\n                    MSJ.Activation_Energy(18),\n                    MSJ.Activation_Method(\"CID\"),\n                    MSJ.Level(2),\n                    MSJ.RT( [1, 60] ),\n                    )","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Several filter types may also be combined for chromatograms:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"chromatogram(\"filename\", MSJ.Precursor(1255.5),\n                         MSJ.Activation_Energy(18),\n                         MSJ.Activation_Method(\"CID\"),\n                         MSJ.Level(2),\n                         )","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"If the condition does not match any existing data, then an ErrorException is returned with the \"No matching spectra.\" message.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The chromatogram function has some methods using MSJ.MethodType arguments:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"MethodType Description Arguments Remark\nMSJ.TIC Total ion current None Default\nMSJ.BasePeak Base peak intensity None \nMSJ.MZ m/z range Vector{Real} \nMSJ.∆MZ m/z ± ∆mz Vector{Real} ","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"These types control the way chromatograms are calculated: either using the total ionic current, the base peak intensity or using a m/z range.  The method argument of the MSJ.chromatogramfunction is set to MSJ.TIC() by default. This setting may be overruled by setting the method to desired value:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"chromatogram(\"filename\", method = MSJ.BasePeak())\nchromatogram(\"filename\", method = MSJ.MZ( [257, 259] ) ) \nchromatogram(\"filename\", method = MSJ.∆MZ( [258, 1] ) ) ","category":"page"},{"location":"manual/#Extracting-subsets-1","page":"Manual","title":"Extracting subsets","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The extract returns a Vector of MSscanfrom either a file of from a Vector{MSscan} following a load command, which corresponds to the filter conditions. See the Filtering part above.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"sub_set = extract(\"filename\")                       # extracting without any conditions returns a vector identical to the output \nsub_set = extract(\"filename\", MSJ.Level(2) )        # extract MS/MS spectra\nscans = load(\"test.mzxml\")                          # load mass spectra\nsub_set = extract(scans)                            # extract a sub_set without conditions returns the original data","category":"page"},{"location":"manual/#Processing-1","page":"Manual","title":"Processing","text":"","category":"section"},{"location":"manual/#Smooth-1","page":"Manual","title":"Smooth","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The smooth function is public and applies on MSscanor MSscans objects, with an optional method argument set to MSJ.SG(5, 9, 0).  Smoothing is performed on the int field using the Savinsky and Golay. The first argument is the order (5 by default), the second is the number of points (default 9)  and the last, is the derivative level (0). The function returns an MScontainer type identical to the input. ","category":"page"},{"location":"manual/#Base-line-correction-1","page":"Manual","title":"Base line correction","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Base line correction is performed using the baseline_correction function. This function as two methods and operates either on MScontainer or on Array of MSscan such as obtained after importing data.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"baseline_correction(scans)\nbaseline_correction(scans, method = MSJ.IPSA(51, 100))","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The method argument allows choosing the algorithm. ","category":"page"},{"location":"manual/#Top-Hat-1","page":"Manual","title":"Top Hat","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"This filter is based Top Hat transform used in image processing (wikipedia, Sauve et al. (2004). The region onto which the operation is performed is set using the regionfield of the MSJ.TopHat. This filter removes every structure from the input which are smaller in size than the structuring element. Usually a region of 100 points is enough.This filter is fast and works quite well on large and complex backgrounds.","category":"page"},{"location":"manual/#Iterative-polynomial-smoothing-algorithm-(IPSA)-1","page":"Manual","title":"Iterative polynomial smoothing algorithm (IPSA)","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The default algorithm is the IPSA for iterative polynomial smoothing algorithm (Wang et al. (2017). This iterative algorithm use a zero ordre Savinsly and Golay smoothing to estimate a background. Then a new input, constructed by taking the minimum of either the original spectrum or the background, is smooth again. The process is repeated until the maximum iteration is reached or when the background does not change much. The termination criteria has been changed from the original paper.","category":"page"},{"location":"manual/#Locally-weighted-error-sum-of-squares-regression-(LOESS)-1","page":"Manual","title":"Locally weighted error sum of squares regression (LOESS)","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The LOESS family of algorithm is based on non-parametric linear local regression where the regression is weighted to reduced the influence of more distant data. We use here the iterative robust estimation procedure where the weights are updated with a bisquare function of the median of the residuals. This algorithm takes the number of iteration to be performed. Usually 3 iteration is enough. This algorithm is slow and is not recommended. The implementation will be improved in future versions.","category":"page"},{"location":"manual/#Peak-picking-1","page":"Manual","title":"Peak picking","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Pick-picking is performed using the public centroid function. It operates on MSscanor MSscanstype of data and return a similar type. It takes a method argument, set by default to the Signal to Noise Analysis method: MSJ.SNRA.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"centroid(scan)","category":"page"},{"location":"manual/#Signal-to-Noise-Ratio-Analysis-(SNRA)-1","page":"Manual","title":"Signal to Noise Ratio Analysis (SNRA)","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Signal to noise ratio analysis is a very general approach, which relies on the definition of noise. Here, we use TopHat filter to define the noise. Then the signal to noise ratio is calculated. Peaks are found by searching for a local maximum for which the signal to noise ratio is above the threshold. By defaults the MSJ.SNRA uses a threshold = 1.0 and a structuring element of 100 points.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"centroid(scan, method = MSJ.SNRA(1., 100)","category":"page"},{"location":"manual/#Threshold-base-peak-detection-algorithm-(TBPD)-1","page":"Manual","title":"Threshold base peak detection algorithm (TBPD)","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The TBPD method identifies features based on their similarity (as described by the Pearson correlation coefficient) with a template peak. By default the MSJ.TBPD method type uses a Gaussian function, with 1000 mass resolving power and a threshold level set to 0.2% as :","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"centroid(scan, method = MSJ.TBPD(:gauss, 1000, 0.2)","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Two other shape functions are available:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":":loretz which uses a Cauchy-Lorentz function and\n:voigt which implements a pseudo-voigt profile (Ida et al., J. Appl. Cryst. (2000), Wikipedia)","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The :lorentz profile fits better Fourrier Transform mass spectra. The :voigt shape is the result of the convolution of gaussi and Cauchy-Lorentz shape.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"centroid(scan, method = MSJ.TBPD(:lorentz, 1000., 0.1)\ncentroid(scan, method = MSJ.TBPD(:voight,  1000., 0.1)","category":"page"},{"location":"manual/#Properties-calculations-1","page":"Manual","title":"Properties calculations","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"From a molecular formula, it is possible to : ","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"calculate the molecular masses \ncalculate the isotopic distributions\nsimulate a mass spectrum providing and isotopic distribution and a peak width.","category":"page"},{"location":"manual/#Parsing-a-chemical-formula-1","page":"Manual","title":"Parsing a chemical formula","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The private function MSJ.formula takes an input string representing a chemical formula, such as \"CH4\", counts the number of atoms in the formula and returns a dictionary. ","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"MSJ.formula(\"CH3Br\")\nDict(\"Br\" => 1,\"C\" => 1,\"H\" => 3)\nDict{String,Int64} with 3 entries:\n  \"Br\" => 1\n  \"C\"  => 1\n  \"H\"  => 3","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"In the previous example, the dictionary had three elements corresponding to the three atomic species found in the \"CH3Br\" formula. The \"Br\" key has the value 1, the \"C\" key has also 1 and the \"H\" key has a value equals to 3. The output of this function will be used by all the other functions, which will calculate properties from it. The  MSJ.formula function accepts stoichiometric regular molecular formulas as well as more developed forms. For hexane the following entries \"C6H14\", \"CH3CH2CH2CH2CH2CH3\" or \"CH3(CH2)4CH3\" are equivalents. ","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"MSJ.formula(\"C2H14\");\nDict(\"C\" => 2,\"H\" => 14)\nMSJ.formula(\"CH3CH2CH2CH2CH2CH3\");\nDict(\"C\" => 2,\"H\" => 14)\nMSJ.formula(\"CH3(CH2)4CH3\");\nDict(\"C\" => 2,\"H\" => 14)","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The indices found after a parenthesis are used to multiply the elements inside the parenthesis. If no indices are found after \")\", then the group is not multiply. The parenthesis are also used to specify an isotope, for example, consider ethane isotopically labelled with carbon 13:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"MSJ.formula(\"CH3(13C)H3\");\nDict(\"C\" => 1,\"13C\" => 1,\"H\" => 6)","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"These expressions are equivalent: \"CH3(13C)H3\", \"CH3(13CH3)\", \"C(13C)H6\". The following isotopes are recognized by MSJ.formula:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"1H   for ^1H_1 (protium)\n2H   for ^2H_2 (deuterium)\nD    equivalent to 2H\n12C  for <sup>12</sup>C<sub>6</sub>\n13C  for <sup>13</sup>C<sub>6</sub>\n14N  for <sup>14</sup>N<sub>7</sub>\n15N  for <sup>15</sup>N<sub>7</sub>\n16O  for <sup>16</sup>O<sub>8</sub>\n18O  for <sup>18</sup>O<sub>8</sub>\n32S  for <sup>32</sup>S<sub>16</sub>\n34S  for <sup>34</sup>S<sub>16</sub>","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The elements are stored in a dictionary called MSJ.Elements. Each key of the MSJ.Elements points to an Array of MSJ.Isotope, which is a structure used to stored the different properties of the isotopes:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"struct Isotope\n    m::Float64           # mass\n    f::Float64           # natural frequency\n    logf::Float64        # logarythm of the natural frequency\n    Z::Int               # atomic number\n    A::Int               # mass number\n    active::Bool         # is radioactive\nend","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The isotopes are sorted by natural frequency. Hence, for instance, the first sulfur isotope is <sup>32</sup>S<sub>16</sub> with a natural frenquency of 0.995 followed by <sup>34</sup>S<sub>16</sub> with 0.043, etc.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"julia> E = MSJ.Elements[\"S\"]\n4-element Array{MSJ.Isotope,1}:\n MSJ.Isotope(31.9720711741, 0.9498500119990401, -0.051451188958515866, 16, 32, false)\n MSJ.Isotope(33.96786703, 0.04252059835213182, -3.157766653355949, 16, 34, false)\n MSJ.Isotope(32.9714589101, 0.00751939844812415, -4.890269137820559, 16, 33, false)\n MSJ.Isotope(35.9670812, 0.00010999120070394368, -9.115110188972029, 16, 36, false)","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The first element of the array, is the most naturally abundant isotope. The properties of the isotopes may be accessed by:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"\tjulia> E = MSJ.Elements[\"S\"];\njulia> E[1]           # returns the most abundant isotope of sulfur\nMSJ.Isotope(31.9720711741, 0.9498500119990401, -0.051451188958515866, 16, 32, false)\njulia> E[2].f       # returns natural abundance of the second most abundant istotope of sulfur.\n0.04252059835213182","category":"page"},{"location":"manual/#Molecular-masses-1","page":"Manual","title":"Molecular masses","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The public function masses, return a dictionary with three keys \"Monoisotopic\", \"Average\" and \"Nominal\", defined as:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Mass Element Molecule or ion\nNominal Mass number of the most abundant stable isotope Sum of the nominal masses of the most abundant stable isotopes\nMonoistopic Atomic mass of the most abundant stable isotope Sum of the atomic masses of the most abundant stable isotopes\nAverage Mass average function of the relative abundances Sum of the average atomic weights of the constituents","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The masses for hexane are obtained by:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"julia> m = masses(\"CH3(CH2)4CH3\")\nDict(\"C\" => 6,\"H\" => 14)\nDict{String,Float64} with 3 entries:\n  \"Monoisotopic\" => 86.1096\n  \"Average\"      => 86.178\n  \"Nominal\"      => 86.0","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"And my be recovered by:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"julia> m[\"Average\"]\n86.178\njulia> m[\"Monoisotopic\"]\n86.10955045178\njulia> m[\"Nominal\"]\n86.0","category":"page"},{"location":"manual/#Isotopic-distributions-1","page":"Manual","title":"Isotopic distributions","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The public function isotopic_distribution calculates the isotopic distribution of the given formula. The function takes the following arguments:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"formula: String\ntarget probability: Real number \ncharge: optional argument Int, by default = +1\ntau: optional Real number set by default to 0.1\nthe elements dictionary: set by default to MSJ.Elements.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The calculations is based on the implementation of the isospec algorithm.  Briefly, the algorithm search for the small set of isotopologues for which the total abundance is equal to the target probability. The calculation return a vector with all the configurations found. The first column gives the masses, the second column the probabilities of the configurations, and the following columns gives the configurations, such as:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"julia> I = isotopic_distribution(\"C6H14\", 0.9999, charge = +1)\nDict(\"C\" => 6,\"H\" => 14)\n5×6 Array{Union{Float64, Int64, String},2}:\n   \"Masses\"   \"Probability\"   \"12C\"   \"13C\"    \"1H\"   \"2H\"\n 86.1096     0.935476        6       0       14      0\n 87.1129     0.0612122       5       1       14      0 \n 88.1163     0.00166891      4       2       14      0 \n 87.1158     0.00151559      6       0       13      1","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The resulting array is intend to be readable easily, and thus the first line contains the descriptors or the columns. It may also be easily exported to a delimited file.","category":"page"},{"location":"manual/#Simulated-mass-spectra-1","page":"Manual","title":"Simulated mass spectra","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"The result of an isotopic distribution calculation may be convoluted by a experimental peak shape to produce a simulated mass spectrum. Such an operatio, is achieved by the simulate function. The function takes the following arguments:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"I: the Arrayresulting from the isotopic_distribution calculation\n∆mz: the width in Dalton of the peak shape\nmodel: the model used for the peak shape. By default it is set to model=:gauss, but may be model=:lorentz or model=:voigt.\nNpoints: an Int value for the number of points in the mass spectrum. By default set to Npoints=1000.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"julia> I = isotopic_distribution(\"C6H14\", 0.9999, charge = +1)\nDict(\"C\" => 6,\"H\" => 14)\njulia> sim = simulate(I, 0.05, model= :lorentz);\njulia> Using Plots\njulia> plot(sim)\n ```\nSee [## Plotting](@ref) for more information on how to plot mass spectra.\n\n\n# Plotting\nPlotting facilities are available as a submodule to the `MSJ` package.  The [`MSJ.plots`](@ref) module relies on the [RecipesBase package](https://github.com/JuliaPlots/RecipesBase.jl), which allows writing recipes to plot users' data types. Hence, recipes have been created for `MSscan`, `Msscans` and `Chromatogram`:\n","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"julia plot(scans[1], method = :relative))","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"```","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"By default plotting is made in relative intensities, which may be changed by setting method to :absolute.","category":"page"},{"location":"reference/#References-1","page":"References","title":"References","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"MSJ.builoto","category":"page"},{"location":"reference/#","page":"References","title":"References","text":"CurrentModule = MSJ\nDocTestSetup  = quote\n    using LightXML\nend","category":"page"},{"location":"reference/#","page":"References","title":"References","text":"This page lists all the documented elements of the MSJ.jl package covering all modules and submodules.","category":"page"},{"location":"reference/#Contents-1","page":"References","title":"Contents","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Main-module-1","page":"References","title":"Main module","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"MSJ","category":"page"},{"location":"reference/#MSJ.MSJ","page":"References","title":"MSJ.MSJ","text":"Main module for msJ.jl– A Julia package to load and process mass spectrometry data.\n\n\n\n\n\n","category":"module"},{"location":"reference/#Types-1","page":"References","title":"Types","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"","category":"page"},{"location":"reference/#","page":"References","title":"References","text":"Submodule with types and structures used to stored the data and dispatch to the right methods.","category":"page"},{"location":"reference/#Data-types-1","page":"References","title":"Data types","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"MSJ.MScontainer\nMSJ.MSscan\nMSJ.MSscans\nMSJ.Chromatogram","category":"page"},{"location":"reference/#MSJ.MScontainer","page":"References","title":"MSJ.MScontainer","text":"abstract type MScontainer  end\n\nAbstract type containing any imported data belongs to the MScontainer type.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.MSscan","page":"References","title":"MSJ.MSscan","text":"struct MSscan <: MScontainer\n\nData structure used to store individual mass spectrometry scans organized following the structure of mzXML files.\n\nstruct MSscan <: MScontainer     num::Int                          # num     rt::Float64                       # retentionTime     tic::Float64                      # totIonCurrent     mz::Vector{Float64}               # m/z     int::Vector{Float64}              # intensity     level::Int                        # msLevel     basePeakMz::Float64               # basePeakMz     basePeakIntensity::Float64        # basePeakIntensity     precursor::Float64                # precursorMz     polarity::String                  # polarity     activationMethod::String          # activationMethod     collisionEnergy::Float64          # collisionEnergy end\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.MSscans","page":"References","title":"MSJ.MSscans","text":"struct MSscans  <: MScontainer\n\nData structure designed to store mass spectra obtained after filtering operation along with the history of these operation.\n\nstruct MSscans  <: MScontainer     num::Vector{Int}                  # num     rt::Vector{Float64}               # retentionTime     tic::Float64                      # totIonCurrent     mz::Vector{Float64}               # m/z     int::Vector{Float64}              # intensity     level::Vector{Int}                # msLevel     basePeakMz::Float64               # basePeakMz     basePeakIntensity::Float64        # basePeakIntensity     precursor::Vector{Float64}        # precursorMz     polarity::Vector{String}          # polarity     activationMethod::Vector{String}  # activationMethod     collisionEnergy::Vector{Float64}  # collisionEnergy     s::Vector{Float64}                # variance end\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.Chromatogram","page":"References","title":"MSJ.Chromatogram","text":"struct Chromatogram  <: MScontainer\n\nData structure used to retrieve chromatography data.\n\nstruct Chromatogram  <: MScontainer     rt::Vector{Float64}     ic::Vector{Float64}     maxic::Float64 end\n\n\n\n\n\n","category":"type"},{"location":"reference/#Methods-Types-1","page":"References","title":"Methods Types","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"MSJ.MethodType\nMSJ.BasePeak\nMSJ.TIC\nMSJ.∆MZ\nMSJ.MZ\nMSJ.SG\nMSJ.TBPD\nMSJ.SNRA\nMSJ.TopHat\nMSJ.LOESS\nMSJ.IPSA","category":"page"},{"location":"reference/#MSJ.MethodType","page":"References","title":"MSJ.MethodType","text":"abstract type MethodType  end\n\nType containing all the methods used for filtering the data.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.BasePeak","page":"References","title":"MSJ.BasePeak","text":"struct BasePeak <: MethodType\n\nStructure for multiple dispatching to retrieve base peak chromatogram.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.TIC","page":"References","title":"MSJ.TIC","text":"struct TIC <: MethodType\n\nDispatching to retrieve total ion current chromatogram.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.∆MZ","page":"References","title":"MSJ.∆MZ","text":"struct ∆MZ{argT <: Union{Real, AbstractVector{<:Real} }} <: MethodType\n\nStructure for multiple dispatching to retrieve extracted ion current chromatogram around an m/z ± ∆mz value given by arg = [mz, ∆mz]\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.MZ","page":"References","title":"MSJ.MZ","text":"struct MZ{argT <: Union{Real, AbstractVector{<:Real} }} <: MethodType\n\nStructure for multiple dispatching to retrieve extracted ion current chromatogram around for m/z in the range arg = [mz1, mz2].\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.SG","page":"References","title":"MSJ.SG","text":"struct SG{argT <: Int} <: MethodType   #Savinsky & Golay filtering\n\nStructure for multiple dispatching to Savinsky & Golay filtering, providing the order, window size and derivative to be performed.  Defaults values are provided in functions calls.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.TBPD","page":"References","title":"MSJ.TBPD","text":"struct TBPD{argT1 <: Symbol, argT2 <: Real}  <: MethodType\n\nStructure for multiple dispatching to Template Base Peak Detection centroiding, providing the shape of the template function, the resolution and threshold.  Defaults values are provided in functions calls.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.SNRA","page":"References","title":"MSJ.SNRA","text":"struct SNRA{argT1 <: Real, argT2 <: Int}  <: MethodType\n\nStructure for multiple dispatching to Signal to Noise Ratio Analysis centroiding, providing the threshold value and the size of the region.  Defaults values are provided in functions calls.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.TopHat","page":"References","title":"MSJ.TopHat","text":"TopHat{argT <: Int} <: MethodType\n\nStructure for multiple dispatching to TopHat baseline correction. Region is used specify the dimention over which this operation performed\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.LOESS","page":"References","title":"MSJ.LOESS","text":"LOESS{argT <: Int} <: MethodType\n\nStructure for multiple dispatching to LOcally Weighted Error Sum of Squares regression (LOESS) baseline correction.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.IPSA","page":"References","title":"MSJ.IPSA","text":"struct IPSA{argT1 <: Int, argT2 <: Real} <: MethodType\n\nStructure for multiple dispatching to iterative polynomial smoothing algorithm (IPSA) baseline correction.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Filters-1","page":"References","title":"Filters","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"MSJ.FilterType\nMSJ.RT\nMSJ.IC\nMSJ.Level\nMSJ.Scan\nMSJ.Polarity\nMSJ.Activation_Method\nMSJ.Activation_Energy\nMSJ.Precursor\nMSJ.Isotopes","category":"page"},{"location":"reference/#MSJ.FilterType","page":"References","title":"MSJ.FilterType","text":"abstract type FilterType end\n\nThis type contains  the structures for filtering the data.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.RT","page":"References","title":"MSJ.RT","text":"RT{argT <: Union{Real, AbstractVector{<:Real},  AbstractVector{<:AbstractVector{<:Real}} }}\n\nThis type contains  the structures for filtering the data.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.IC","page":"References","title":"MSJ.IC","text":"struct IC{argT <: Union{Real, AbstractVector{<:Real} }} <: FilterType\n\nUsed for multiple dispatching to Template Base Peak Detection centroiding, providing the shape of the template function, the resolution and threshold.  Defaults values are provided in functions calls.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.Level","page":"References","title":"MSJ.Level","text":"struct Level{argT <: Union{Int, AbstractVector{<:Int} }} <: FilterType\n\nUsed to dispatch filters to MS level.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.Scan","page":"References","title":"MSJ.Scan","text":" Scan{argT <: Union{Int, AbstractVector{<:Int} }} <: FilterType\n\nDispatch filter to scan num.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.Polarity","page":"References","title":"MSJ.Polarity","text":"struct Polarity{argT <: Union{String, AbstractVector{<:String} }} <: FilterType\n\nDispatch filter to polarity.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.Activation_Method","page":"References","title":"MSJ.Activation_Method","text":"struct Activation_Method{argT <: Union{String, AbstractVector{<:String} }} <: FilterType\n\nDispatch filter to activation methods\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.Activation_Energy","page":"References","title":"MSJ.Activation_Energy","text":"struct Activation_Energy{argT <: Union{Real, AbstractVector{<:Real} }} <: FilterType\n\nDispatch filter to activation energies.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MSJ.Precursor","page":"References","title":"MSJ.Precursor","text":"struct Precursor{argT <: Union{Real, AbstractVector{<:Real} }} <: FilterType\n\nDispatch filter to precursor.\n\n\n\n\n\n","category":"type"},{"location":"reference/#I/O-1","page":"References","title":"I/O","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"","category":"page"},{"location":"reference/#","page":"References","title":"References","text":"Module for importing and exporting data. Dispatch to specific methods according to the file extension","category":"page"},{"location":"reference/#","page":"References","title":"References","text":"MSJ.info(filename::String; verbose::Bool = false)\nMSJ.load(filename::String)\nMSJ.retention_time(filename::String)\nMSJ.chromatogram(filename::String, filters::FilterType...; method::MethodType=TIC())\nMSJ.average(filename::String, arguments::FilterType...; stats::Bool=true)","category":"page"},{"location":"reference/#MSJ.info-Tuple{String}","page":"References","title":"MSJ.info","text":"info(filename::String, verbose::Bool = false)\n\nThe function looks into an file and returns in an Array{String} containing the number of scans and the different scans described by their MS level, polarity and eventually the precursor m/z followed by the activation method and collision energy. Each entry is unique, which gives a summary of the input file. With verbose = true, the functions also returns the parentFile, msManufacturer, msModel, msIonisation, msMassAnalyzer, msDetector, software and dataProcessing if existing.\n\nExample\n\njulia> info(\"test1.mzXML\")\n4-element Array{String,1}:\n \"51 scans\"               \n \"MS1+\"                   \n \"MS2+ 1255.5  CID(CE=18)\"\n \"MS3+ 902.33  PQD(CE=35)\"\njulia> MSJ.info(\"test1.mzXML\", verbose = true)\n12-element Array{String,1}:\n \"parentFile: test1_MSJ_1.raw\"\n \"msManufacturer: Thermo Finnigan\"\n \"msModel: LTQ XL\"      \n \"msIonisation: ESI\"\n \"msMassAnalyzer: ITMS\"\n \"msDetector: unknown\"\n \"software: Xcalibur, 2.6.0 SP3\"\n \"dataProcessing: conversion, ReAdW 4.3.1(build Sep  9 2009 12:30:29)\"\n \"51 scans\"\n \"MS1+\"\n \"MS2+ 1255.5  CID(CE=18)\"\n \"MS3+ 902.33  PQD(CE=35)\"\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.load-Tuple{String}","page":"References","title":"MSJ.load","text":"function load(filename::String)\n\nChecks the file extension and calls the right function to load the mass spectra if it exists. Returns an array of MSJ.MSscan where the individual mass spectra are stored. \n\nExamples\n\njulia> scans = load(\"test.mzXML\")\n51-element Array{MSJ.MSscan,1}:\n MSJ.MSscan(1, 0.1384, 5.08195e6, [140.083, 140.167, 140.25, 140.333, 140.417, 140.5, 140.583, 140.667, 140.75, 140.833  …  1999.25, 1999.33, 1999.42, ....\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.retention_time-Tuple{String}","page":"References","title":"MSJ.retention_time","text":"retention_time(filename::String)\n\nReturns an array composed of the retention times of the individual mass spectra. \n\nExamples\n\njulia> retention_time(\"test.mzXML\")\n51-element Array{Float64,1}:\n  0.1384\n  0.7307\n  2.1379\n....\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.chromatogram-Tuple{String,Vararg{MSJ.FilterType,N} where N}","page":"References","title":"MSJ.chromatogram","text":"chromatogram(filename::String, filters::FilterType...; method::MethodType=TIC())\n\nReturns a structure holding the retention time (rt),  the ion current (ic) and the maximum value (maxic) for all the mass spectra within the file. Alternatively, other options may be supplied such as method = MSJ.BasePeak, which returns the base peak intensity, method = MSJ.∆MZ([500,5]), which returns the ion current for the range mz = 500 ± 5, or method = MSJ.MZ([200,1000]) which return the ion current in the range from m/z 200 to m/z 1000.  The data may be filtered by ms level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\")...\n\nExamples\n\njulia> rt, ic = chromatogram(\"test.mzxml\")\n([0.1384  …  60.4793], [4.74795e6  …  17.4918])\njulia> rt, ic = chromatogram(\"test.mzxml\", method = MSJ.BasePeak() )\n([0.1384  …  60.4793], [102558.0  …  1.23181])\njulia> rt, ic = chromatogram(\"test.mzxml\", method = MSJ.∆MZ([500,5]) )\n([0.1384  …  60.4793], [46036.6  …  14.2529])\njulia> rt, ic = chromatogram(\"test.mzxml\", method = MSJ.MZ([200,1000]))\n([0.1384  …  60.4793], [4.74795e6  …  17.4918])\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{String,Vararg{MSJ.FilterType,N} where N}","page":"References","title":"MSJ.average","text":"average(filename::String, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within file. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#mzXML-1","page":"References","title":"mzXML","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"","category":"page"},{"location":"reference/#","page":"References","title":"References","text":"Interface to the mzxml file format","category":"page"},{"location":"reference/#","page":"References","title":"References","text":"MSJ.info_mzxml\nMSJ.load_mzxml_all\nMSJ.load_mzxml\nMSJ.load_mzxml_spectrum\nMSJ.retention_time(msRun::XMLElement)\nMSJ.average(msRun::XMLElement, argument::Level{<:Int})\nMSJ.average(msRun::XMLElement, argument::Level{<:AbstractVector})\nMSJ.average(msRun::XMLElement, argument::Scan{<:Int})\nMSJ.average(msRun::XMLElement, argument::Scan{<:AbstractVector})\nMSJ.average(msRun::XMLElement, argument::Polarity{<:String})\nMSJ.average(msRun::XMLElement, argument::Polarity{<:AbstractVector})\nMSJ.average(msRun::XMLElement, argument::RT{<:Real})\nMSJ.average(msRun::XMLElement, argument::RT{<:AbstractVector})\nMSJ.average(msRun::XMLElement, argument::RT{<:AbstractVector{<:AbstractVector} } )\nMSJ.average(msRun::XMLElement, argument::IC{<:AbstractVector})\nMSJ.average(msRun::XMLElement, argument::Precursor{<:Real})\nMSJ.average(msRun::XMLElement, argument::Precursor{<:AbstractVector})\nMSJ.average(msRun::XMLElement, argument::Activation_Energy{<:Real})\nMSJ.average(msRun::XMLElement, argument::Activation_Energy{<:AbstractVector})\nMSJ.average(msRun::XMLElement, argument::Activation_Method{<:String})\nMSJ.average(msRun::XMLElement, argument::Activation_Method{<:AbstractVector})\nMSJ.extracted_chromatogram(filename::String, indices::Vector{Int},method::MethodType)\nMSJ.composite_spectra(filename::String, indices::Vector{Int}, stats::Bool)","category":"page"},{"location":"reference/#MSJ.info_mzxml","page":"References","title":"MSJ.info_mzxml","text":"info_mzxml(filename::String, info::Vector{String}, verbose::Bool=false)\n\nReturns the information content of an mzXML file into a string. Verbosity is controlled by the verbose Boolean variable set by default to false.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MSJ.load_mzxml_all","page":"References","title":"MSJ.load_mzxml_all","text":"load_mzxml_all(filename::String)\n\nLoad an entire an mzxml file, and return the  \n\n\n\n\n\n","category":"function"},{"location":"reference/#MSJ.load_mzxml","page":"References","title":"MSJ.load_mzxml","text":"load_mzxml(filename::String, index::Int\n\nLoad from an mzxml file the scan num that match the input index\n\n\n\n\n\n","category":"function"},{"location":"reference/#MSJ.load_mzxml_spectrum","page":"References","title":"MSJ.load_mzxml_spectrum","text":"load_mzxml_spectrum(c::XMLElement)\n\nFrom an XMLElement, returns the data into an MSscan. \n\n\n\n\n\n","category":"function"},{"location":"reference/#MSJ.retention_time-Tuple{LightXML.XMLElement}","page":"References","title":"MSJ.retention_time","text":"retention_time(msRun::XMLElement)\n\nFrom an XMLE element returns the retention time.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.extracted_chromatogram-Tuple{String,Array{Int64,1},MSJ.MethodType}","page":"References","title":"MSJ.extracted_chromatogram","text":"extracted_chromatogram(filename::String, indices::Vector{Int},method::MethodType)\n\nReturns the extracted chromatogram for input file according to the selected method and for set of scan num as input\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.composite_spectra-Tuple{String,Array{Int64,1},Bool}","page":"References","title":"MSJ.composite_spectra","text":"composite_spectra(filename::String, indices::Vector{Int}, stats::Bool)\n\nReturns the average MSscans for input filename and according to the input scan num. Calculation of variance is controlled by the stats Boolean variable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Filtering-1","page":"References","title":"Filtering","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"MSJ.average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\nMSJ.chromatogram(scans::Vector{MSscan}, filters::FilterType...; method::MethodType=TIC())\nMSJ.retention_time(scans::Vector{MSscan})\nMSJ.average(scans::Vector{MSscan}, argument::Scan{<:Int})\nMSJ.average(scans::Vector{MSscan}, argument::Scan{<:AbstractVector})\nMSJ.average(scans::Vector{MSscan}, argument::Level{<:Int})\nMSJ.average(scans::Vector{MSscan}, argument::Level{<:AbstractVector})\nMSJ.average(scans::Vector{MSscan}, argument::Precursor{<:Real})\nMSJ.average(scans::Vector{MSscan}, argument::Precursor{<:AbstractVector})\nMSJ.average(scans::Vector{MSscan}, argument::Activation_Energy{<:Real})\nMSJ.average(scans::Vector{MSscan}, argument::Activation_Energy{<:AbstractVector})\nMSJ.average(scans::Vector{MSscan}, argument::Activation_Method{<:String})\nMSJ.average(scans::Vector{MSscan}, argument::Activation_Method{<:AbstractVector})\nMSJ.average(scans::Vector{MSscan}, argument::Polarity{<:String})\nMSJ.average(scans::Vector{MSscan}, argument::Polarity{<:AbstractVector})\nMSJ.average(scans::Vector{MSscan}, argument::RT{<:Real}) \nMSJ.average(scans::Vector{MSscan}, argument::RT{<:AbstractVector})\nMSJ.average(scans::Vector{MSscan}, argument::RT{<:AbstractVector{<:AbstractVector} } )\nMSJ.average(scans::Vector{MSscan}, argument::IC{<:AbstractVector})\nMSJ.extracted_chromatogram(scans::Vector{MSscan}, indices::Vector{Int},method::MethodType)\nMSJ.composite_spectra(scans::Vector{MSscan}, indices::Vector{Int}, stats::Bool)","category":"page"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},Vararg{MSJ.FilterType,N} where N}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.chromatogram-Tuple{Array{MSJ.MSscan,1},Vararg{MSJ.FilterType,N} where N}","page":"References","title":"MSJ.chromatogram","text":"chromatogram(scans::Vector{MSscan}, filters::FilterType...; method::MethodType=TIC())\n\nReturns the retention time and the total ion current by default for all the mass spectra within the Array of mass spectrum container MSscan. Alternatively, other options may be supplied such as method = MSJ.BasePeak, which returs the base peak intensity, method = MSJ.∆MZ([500,5]), which returns the ion current for the range mz = 500 ± 5, or method = MSJ.MZ([200,1000]) which return the ion current in the range from m/z 200 to m/z 1000.  The data may be filtered by ms level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\")...\n\nExamples\n\njulia> rt, ic = chromatogram(\"test.mzxml\")\n([0.1384  …  60.4793], [4.74795e6  …  17.4918])\njulia> rt, ic = chromatogram(\"test.mzxml\", method = MSJ.BasePeak() )\n([0.1384  …  60.4793], [102558.0  …  1.23181])\njulia> rt, ic = chromatogram(\"test.mzxml\", method = MSJ.∆MZ([500,5]) )\n([0.1384  …  60.4793], [46036.6  …  14.2529])\njulia> rt, ic = chromatogram(\"test.mzxml\", method = MSJ.MZ([200,1000]))\n([0.1384  …  60.4793], [4.74795e6  …  17.4918])\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.retention_time-Tuple{Array{MSJ.MSscan,1}}","page":"References","title":"MSJ.retention_time","text":"retention_time(scans::Vector{MSscan})\n\nReturns an array composed of the retention times of the individual mass spectra. \n\nExamples\n\njulia> retention_time(\"scans\")\n51-element Array{Float64,1}:\n  0.1384\n  0.7307\n  2.1379\n....\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.Scan{#s3} where #s3<:Int64}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.Scan{#s3} where #s3<:(AbstractArray{T,1} where T)}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.Level{#s3} where #s3<:Int64}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.Level{#s3} where #s3<:(AbstractArray{T,1} where T)}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.Precursor{#s3} where #s3<:Real}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.Precursor{#s3} where #s3<:(AbstractArray{T,1} where T)}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.Activation_Energy{#s3} where #s3<:Real}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.Activation_Energy{#s3} where #s3<:(AbstractArray{T,1} where T)}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.Activation_Method{#s3} where #s3<:String}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.Activation_Method{#s3} where #s3<:(AbstractArray{T,1} where T)}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.Polarity{#s3} where #s3<:String}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.Polarity{#s3} where #s3<:(AbstractArray{T,1} where T)}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.RT{#s3} where #s3<:Real}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.RT{#s3} where #s3<:(AbstractArray{T,1} where T)}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.RT{#s3} where #s3<:(AbstractArray{#s2,1} where #s2<:(AbstractArray{T,1} where T))}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.average-Tuple{Array{MSJ.MSscan,1},MSJ.IC{#s3} where #s3<:(AbstractArray{T,1} where T)}","page":"References","title":"MSJ.average","text":"average(scans::Vector{MSscan}, arguments::FilterType...; stats::Bool=true)\n\nReturns the average mass spectrum container (MSscans) along with the sample standard deviation of the intensities with stats=true (default) for all the mass spectra within the Array of mass spectrum container MSscan.. The data may be filtered by level, precursor mass, activation methods, etc, using the arguments MSJ.Level(N), MSJ.Precursor(mz), MSJ.Activation_Method(\"method\"), or any combination of these arguments.\n\nExamples\n\njulia> spectrum = average(\"test.mzxml\")\nMSJ.MSscans([1, 2, 3 ....\njulia> spectrum = average(\"test.mzxml\", MSJ.Level(1) )\nMSJ.MSscans([1, 4, 7, 10,\njulia> spectrum = average(\"test.mzxml\", MSJ.Precursor(1255.5) )\nMSJ.MSscans([2, 5, 8, 11, ...\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\") )\nMSJ.MSscans([3, 6, 9, 12, 15,\njulia> spectrum = average(\"test.mzxml\", MSJ.Activation_Method(\"PQD\"), MSJ.Polarity(\"+\"), MSJ.RT([10,20]))\nMSJ.MSscans([9, 12, 15, 18], ...\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.extracted_chromatogram-Tuple{Array{MSJ.MSscan,1},Array{Int64,1},MSJ.MethodType}","page":"References","title":"MSJ.extracted_chromatogram","text":"extracted_chromatogram(scans::Vector{MSscan}, indices::Vector{Int},method::MethodType)\n\nReturns the extracted chromatogram for input Array of MSscan according to the selected method and for set of scan num as input\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.composite_spectra-Tuple{Array{MSJ.MSscan,1},Array{Int64,1},Bool}","page":"References","title":"MSJ.composite_spectra","text":"composite_spectra(scans::Vector{MSscan}, indices::Vector{Int}, stats::Bool)\n\nReturns the average MSscans for input Array of MSscan and according to the input scan num. Calculation of variance is controlled by the stats Boolean variable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Extracting-subsets-1","page":"References","title":"Extracting subsets","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"MSJ.extract(filename::String, arguments::FilterType...)\nMSJ.extract(scans::Vector{MSscan}, arguments::FilterType...)\nMSJ.build_subset(filename::String, indices::Vector{Int})\nMSJ.build_subset(scans::Vector{MSscan}, indices::Vector{Int})","category":"page"},{"location":"reference/#MSJ.extract-Tuple{String,Vararg{MSJ.FilterType,N} where N}","page":"References","title":"MSJ.extract","text":"extract(filename::String, arguments::FilterType...)\n\nSearch for scans matching the argument MS level and returns an array of matching MSscans otherwise returns an ErrorException: \"No matching spectra found.\"\n\nExamples\n\njulia> sub_set = extract(\"test.mzxml\")\n6-element Array{MSJ.MSscan,1}:\n MSJ.MSscan(1, 0.1384, 5.08195e6, [140.083, 140.167, 140.25, 140.333, 140.417, 140.5, 140.583, 140.667, 140.75, 140.833  …  1999.25, 1999.33, 1999.42, ....\njulia> sub_set = extract(\"test.mzxml\", MSJ.Level(2) )      # extract MS/MS spectra\nMSJ.MSscan(2, 0.7307, 9727.2, [345.083, 345.167, 345.25, 345.333, 345.417, 345.5, 345.583, 345.667, 345.75, 345.833  …  1999.25, 1999.33, 1999.42, 1999.5, 1999.58 ....\n MSJ.MSscan(5, 4.3442, 12203.5, [345.083, 345.167, 345.25, 345.333, 345.417, 345.5, 345.583, 345.667, 345.75, 345.833  …  1999.25, 1999.33, 1999.42, 1999.5, 1999.58, ....\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.extract-Tuple{Array{MSJ.MSscan,1},Vararg{MSJ.FilterType,N} where N}","page":"References","title":"MSJ.extract","text":"extract(scans::Vector{MSscan}, arguments::FilterType...)\n\nSearch for scans matching the argument MS level and returns an array of matching MSscans otherwise returns an ErrorException: \"No matching spectra found.\"\n\nExamples\n\njulia> scans = load(\"test.mzxml\")                          # load mass spectra\n6-element Array{MSJ.MSscan,1}:\n MSJ.MSscan(1, 0.1384, 5.08195e6, [140.083, 140.167, 140.25, 140.333, 140.417, 140.5, 140.583, 140.667, 140.75, 140.833  …  1999.25, 1999.33, 1999.42, ...\njulia> sub_set = extract(scans)                            # extract a sub_set without conditions returns the original data\n6-element Array{MSJ.MSscan,1}:\n MSJ.MSscan(1, 0.1384, 5.08195e6, [140.083, 140.167, 140.25, 140.333, 140.417, 140.5, 140.583, 140.667, 140.75, 140.833  …  1999.25, 1999.33, 1999.42, ....\njulia> sub_set = extract(scans, MSJ.Level(2) )      # extract MS/MS spectra\nMSJ.MSscan(2, 0.7307, 9727.2, [345.083, 345.167, 345.25, 345.333, 345.417, 345.5, 345.583, 345.667, 345.75, 345.833  …  1999.25, 1999.33, 1999.42, 1999.5, 1999.58 ....\n MSJ.MSscan(5, 4.3442, 12203.5, [345.083, 345.167, 345.25, 345.333, 345.417, 345.5, 345.583, 345.667, 345.75, 345.833  …  1999.25, 1999.33, 1999.42, 1999.5, 1999.58, ....\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.build_subset-Tuple{String,Array{Int64,1}}","page":"References","title":"MSJ.build_subset","text":"build_subset(filename::String, indices::Vector{Int})\n\nReturns a Vector of MSscan from the input file according to the scan num (indices).\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.build_subset-Tuple{Array{MSJ.MSscan,1},Array{Int64,1}}","page":"References","title":"MSJ.build_subset","text":"build_subset(scans::Vector{MSscan}, indices::Vector{Int})\n\nReturns a Vector of MSscan according to the input scan num.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Process-1","page":"References","title":"Process","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"","category":"page"},{"location":"reference/#Mass-spectrum-1","page":"References","title":"Mass spectrum","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"","category":"page"},{"location":"reference/#","page":"References","title":"References","text":"MSJ.smooth(scan::MScontainer; method::MethodType=SG(5, 9, 0))\nMSJ.smooth(scans::Vector{MSscan}; method::MethodType=SG(5, 9, 0))\nMSJ.savitzky_golay_filtering(scan::MScontainer, order::Int, window::Int, deriv::Int)\nMSJ.smooth(scans::Vector{MSscan}; method::MethodType=SG(5, 9, 0))\nMSJ.centroid(scan::MScontainer; method::MethodType=SNRA(1., 100) )\nMSJ.centroid(scans::Vector{MSscan}; method::MethodType=SNRA(1., 100) \nMSJ.snra(scan::MScontainer, thres::Real, region::Int)\nMSJ.tbpd(scan::MScontainer, model::Function,  ∆mz::Real, thres::Real)\nMSJ.gauss(x::Float64, p::Vector{Float64})\nMSJ.lorentz(x::Float64, p::Vector{Float64})\nMSJ.voigt(x::Float64, p::Vector{Float64})\nMSJ.tbpd(scan::MScontainer, shape::Symbol,  R::Real, thres::Real)\nMSJ.baseline_correction(scan::MScontainer; method::MethodType=TopHat(100) )\nMSJ.baseline_correction(scans::Vector{MSscan}; method::MethodType=TopHat(100) )\nMSJ.tophat_filter(scan::MScontainer, region::Int )\nMSJ.tophat_filter(scans::Vector{MSscan}, region::Int )\nMSJ.loess(scans::Vector{MSscan}, iter::Int )\nMSJ.loess(scan::MScontainer, iter::Int )\nMSJ.ipsa(scan::MScontainer, width::Real, maxiter::Int)\nMSJ.ipsa(scans::Vector{MSscan}, width::Real, maxiter::Int)","category":"page"},{"location":"reference/#MSJ.smooth-Tuple{MSJ.MScontainer}","page":"References","title":"MSJ.smooth","text":"smooth(scan::MScontainer; method::MethodType=SG(5, 9))\n\nSmooth the intensity of the input data and returns a similar structure.\n\nExamples\n\njulia> smoothed_data = MSJ.smooth(scans)\nMSJ.MSscans(1, 0.1384, 5.08195e6, [140.083, 140.167, 140.25, 140.333, 140.417, 140.5, 140.583, 140.667, 140.75, 140.833  …  1999.25, 1999.33, 1999.42, ....\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.smooth-Tuple{Array{MSJ.MSscan,1}}","page":"References","title":"MSJ.smooth","text":"smooth(scans::Vector{MSscan}; method::MethodType=SG(5, 9, 0))\n\nSmooth the intensity of the input data and returns a similar structure.\n\nExamples\n\njulia> scans = load(\"filename\")\njulia> smoothed_data = MSJ.smooth(scans)\n6-element Array{MSJ.MSscan,1}:\n MSJ.MSscan(1, 0.1384, 5.08195e6 .....\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.savitzky_golay_filtering-Tuple{MSJ.MScontainer,Int64,Int64,Int64}","page":"References","title":"MSJ.savitzky_golay_filtering","text":"savitzky_golay_filtering(scan::MSJ.MScontainer, order::Int, window::Int, deriv::Int)\n\nSavinsky and Golay filtering of mz and int data within the MSscan(s) container.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.centroid-Tuple{MSJ.MScontainer}","page":"References","title":"MSJ.centroid","text":"centroid(scan::MScontainer; method::MethodType=MethodType=SNRA(1., 100) )\n\nPeak picking algorithm taking a MSscan or MSscans object as input and returning an object of the same type containing the detected peaks.  Available algorithm are : Signal to Noise Ratio (SNR) and Template Based Peak Detection (TBPD). Default method is Signal to Noise Ratio Analysis (SNRA), with default threshold = 1.0 and region = 100.\n\nExamples\n\njulia> centroid(scans)\nMSscans(1, 0.1384, 5.08195e6, [140.083, 140.167, 140.25, 140.333, 140.417, 140.5, 140.583, 140.667, 140.75, 140.833  …  1999.25, 1999.33, 1999.42, ....\n\n\n\n\n\n","category":"method"},{"location":"reference/#Chromatogram-1","page":"References","title":"Chromatogram","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"","category":"page"},{"location":"reference/#","page":"References","title":"References","text":"No functions yet. To be added.","category":"page"},{"location":"reference/#Simulation-1","page":"References","title":"Simulation","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"","category":"page"},{"location":"reference/#","page":"References","title":"References","text":"MSJ.formula\nMSJ.masses\nMSJ.isotopic_distribution\nMSJ.simulate","category":"page"},{"location":"reference/#MSJ.formula","page":"References","title":"MSJ.formula","text":"formula(formula::String)\n\nPrivate function that reads the input chemical formula and sorts the atoms. It returns a dictionary in which the different entries represent the atoms and the values are the number of times the atoms have been found in the formula.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MSJ.masses","page":"References","title":"MSJ.masses","text":"masses(input::String)\n\nCalculates the average, monoistopic and nominal masses for the chemical formula given as an input. The result is returned in a dictionary with the following entries: \"Monoiotopic\", Average\" and \"Nominal\".\n\nExamples\n\njulia> masses(\"C254 H377 N65 O75 S6\")\nDict(\"S\" => 6,\"C\" => 254,\"N\" => 65,\"H\" => 377,\"O\" => 75)\nDict{String,Float64} with 3 entries:\n  \"Monoisotopic\" => 5729.6\n  \"Average\"      => 5733.55\n  \"Nominal\"      => 5727.0\n\n\n\n\n\nmasses(f::Dict{String,Int64})\n\nCalculates the average, monoistopic and nominal masses for the chemical formula dictionary, such as prodcued by MSJ.formula. The result is returned in a dictionary with the following entries: \"Monoiotopic\", Average\" and \"Nominal\".\n\nExamples\n\njulia> masses(\"C254 H377 N65 O75 S6\")\nDict(\"S\" => 6,\"C\" => 254,\"N\" => 65,\"H\" => 377,\"O\" => 75)\nDict{String,Float64} with 3 entries:\n  \"Monoisotopic\" => 5729.6\n  \"Average\"      => 5733.55\n  \"Nominal\"      => 5727.0\n\n\n\n\n\n","category":"function"},{"location":"reference/#MSJ.isotopic_distribution","page":"References","title":"MSJ.isotopic_distribution","text":"isotopic_distribution(input::String, p_target::Real; charge::Int = +1, tau::Real = 0.1, Elements::Dict{String,Array{MSJ.Isotope,1}} = MSJ.Elements)\n\nCalculates the isotopic distribution of input formula for which the overall probabilities equals p_target using the isospec algorithm. The charge state is entered as an optional argument. The peaks detection threshold tau is by default set to 10%.\n\nExamples\n\njulia> isotopic_distribution(\"C254 H377 N65 O75 S6\", 0.5)\nDict(\"S\" => 6,\"C\" => 254,\"N\" => 65,\"H\" => 377,\"O\" => 75)\n9×15 Array{Union{Float64, Int64, String},2}:\n     \"Masses\"   \"Probability\"     \"12C\"   \"13C\"   \"32S\"   \"34S\"   \"33S\"   \"36S\"    \"14N\"   \"15N\"    \"16O\"   \"18O\"   \"17O\"     \"1H\"   \"2H\"\n 5731.61       0.112302        252       2       6       0       0       0       65       0       75       0       0       377      0    \n 5732.61       0.102878        251       3       6       0       0       0       65       0       75       0       0       377      0    \n 5730.6        0.0814037       253       1       6       0       0       0       65       0       75       0       0       377      0    \n 5733.61       0.0704028       250       4       6       0       0       0       65       0       75       0       0       377      0    \n 5734.62       0.0383896       249       5       6       0       0       0       65       0       75       0       0       377      0    \n 5733.6        0.0301637       252       2       5       1       0       0       65       0       75       0       0       377      0    \n 5729.6        0.0293871       254       0       6       0       0       0       65       0       75       0       0       377      0    \n 5734.61       0.0276323       251       3       5       1       0       0       65       0       75       0       0       377      0    \n``julia> isotopic_distribution(\"C254 H377 N65 O75 S6\", 0.5, charge = +7)\nDict(\"S\" => 6,\"C\" => 254,\"N\" => 65,\"H\" => 377,\"O\" => 75)\n9×15 Array{Union{Float64, Int64, String},2}:\n    \"Masses\"   \"Probability\"     \"12C\"   \"13C\"   \"32S\"   \"34S\"   \"33S\"   \"36S\"    \"14N\"   \"15N\"    \"16O\"   \"18O\"   \"17O\"     \"1H\"   \"2H\"\n 818.801      0.112302        252       2       6       0       0       0       65       0       75       0       0       377      0    \n 818.944      0.102878        251       3       6       0       0       0       65       0       75       0       0       377      0    \n 818.658      0.0814037       253       1       6       0       0       0       65       0       75       0       0       377      0    \n 819.088      0.0704028       250       4       6       0       0       0       65       0       75       0       0       377      0    \n 819.231      0.0383896       249       5       6       0       0       0       65       0       75       0       0       377      0    \n 819.086      0.0301637       252       2       5       1       0       0       65       0       75       0       0       377      0    \n 818.514      0.0293871       254       0       6       0       0       0       65       0       75       0       0       377      0    \n 819.23       0.0276323       251       3       5       1       0       0       65       0       75       0       0       377      0    \n\n\n\n\n\n","category":"function"},{"location":"reference/#MSJ.simulate","page":"References","title":"MSJ.simulate","text":"simulate(I::Array{Union{Float64, Int64, String}}, ∆mz::Real; model::Symbol=:gauss, Npoints::Int=1000)\n\nFrom an isotopic distribution and a peak width returns a mass spectrum (MSScan). The number of points of the resulting mass spectrum is passed as an optional argument. Peak shape are :gauss (default), :lorentz, :voight.\n\nExamples\n\njulia>  a = simulate(I, 0.4)\nMSJ.MSscan(1, 0.0, 30898.192348114364, [5727.102517458742 ..., \"\", \"\", 0.0)\n\n\n\n\n\n","category":"function"},{"location":"reference/#Plots-1","page":"References","title":"Plots","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"","category":"page"},{"location":"reference/#","page":"References","title":"References","text":"Modules = [MSJ.plots]\n","category":"page"},{"location":"reference/#MSJ.plots","page":"References","title":"MSJ.plots","text":"Plotting module for MScontainer data type (MSscan, MSscans and Chromatogram).\n\njulia> plot(scans[1])\njulia> plot(chr)\n\n\n\n\n\n","category":"module"},{"location":"reference/#MSJ.plots.normalisation-Tuple{MSJ.Chromatogram}","page":"References","title":"MSJ.plots.normalisation","text":"normalisation(cr::MSJ.Chromatogram)\n\nNormalization function for plotting chromatograms in raltive intensity.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.plots.normalisation-Tuple{MSJ.MScontainer}","page":"References","title":"MSJ.plots.normalisation","text":"normalisation(ms::MSJ.MScontainer)\n\nNormalization function for plotting mass spectra in relative intensity.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.plots.scaling-Tuple{MSJ.Chromatogram}","page":"References","title":"MSJ.plots.scaling","text":"scaling(cr::MSJ.Chromatogram)\n\nScaling function to display retention times of chromatograms in minutes instead of seconds.\n\n\n\n\n\n","category":"method"},{"location":"reference/#RecipesBase.apply_recipe-Tuple{Dict{Symbol,Any},MSJ.Chromatogram}","page":"References","title":"RecipesBase.apply_recipe","text":"h(cr::MSJ.Chromatogram; method = :relative)\n\nAllows plotting directly chromatograms. The defaults relative intensity plotting may be changed by setting method = :absolute.\n\n\n\n\n\n","category":"method"},{"location":"reference/#RecipesBase.apply_recipe-Tuple{Dict{Symbol,Any},MSJ.MSscans}","page":"References","title":"RecipesBase.apply_recipe","text":"g(ms::MSJ.MSscans; method = :relative)\n\nAllows plotting directly mass spectra MSscans. The defaults relative intensity plotting may be changed by setting method = :absolute.\n\n\n\n\n\n","category":"method"},{"location":"reference/#RecipesBase.apply_recipe-Tuple{Dict{Symbol,Any},MSJ.MSscan}","page":"References","title":"RecipesBase.apply_recipe","text":"f(ms::MSscan; method = :relative)\n\nAllows plotting directly mass spectra MSscan. The defaults relative intensity plotting may be changed by setting method = :absolute.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Utilities-1","page":"References","title":"Utilities","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"","category":"page"},{"location":"reference/#Base-overloaded-1","page":"References","title":"Base overloaded","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"+(a::MScontainer, b::MScontainer)\n-(a::MScontainer, b::MScontainer)\n/(a::MSscan, N::Real)\n/(a::MSscans, N::Real)\n*(a::MSscan, N::Real)\n*(a::MSscans, N::Real)\n*(N::Real, a::MScontainer)\n*(a::MScontainer, b::MScontainer)","category":"page"},{"location":"reference/#Base.:+-Tuple{MSJ.MScontainer,MSJ.MScontainer}","page":"References","title":"Base.:+","text":"+(a::MScontainer, b::MScontainer)\n\nAddition of mass spectra elementwise.\n\njulia> scans[1] - scans[2]\nMSJ.MSscans([1, 2], [0.1384, 0.7307]\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.:--Tuple{MSJ.MScontainer,MSJ.MScontainer}","page":"References","title":"Base.:-","text":"-(a::MScontainer, b::MScontainer)\n\nSubstraction of mass spectra elementwise. Negative scan num refers the 'b' MScontainer.\n\njulia> a - b\nMSJ.MSscans([1, 4], [0.1384, 3.7578, -0.1384, -3.7578]...\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.:/-Tuple{MSJ.MSscan,Real}","page":"References","title":"Base.:/","text":"/(a::MSscan, N::Real)\n\nDivide the intensity and the tic data of a MSscan by a number.\n\njulia> scans[1] / 1.0e2\nMSJ.MSscan(1, 0.1384, 50819.5, [140. ....\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.:/-Tuple{MSJ.MSscans,Real}","page":"References","title":"Base.:/","text":"/(a::MSscans, N::Real)\n\nDivide in the intenisty, tic and variance of a MSscans by a number.\n\njulia> a / 1.0e2\nMSJ.MSscans(1, 0.1384, 50819.5, [140. ....\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.:*-Tuple{MSJ.MSscan,Real}","page":"References","title":"Base.:*","text":"*(a::MSscan, N::Real)\n\nMultiply the intensity and the tic data of a MSscan by a number.\n\njulia> scans[1] * 1.0e2\nMSJ.MSscan(1, 0.1384, 50819.5, [140. ....\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.:*-Tuple{MSJ.MSscans,Real}","page":"References","title":"Base.:*","text":"*(a::MSscans, N::Real)\n\nMultiply in the intenisty, tic and variance of a MSscans by a number.\n\njulia> a * 1.0e2\nMSJ.MSscans(1, 0.1384, 50819.5, [140. ....\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.:*-Tuple{Real,MSJ.MScontainer}","page":"References","title":"Base.:*","text":"*(N::Real, a::MScontainer)\n\nCommutation of multiplication of number with MSscontainer.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.:*-Tuple{MSJ.MScontainer,MSJ.MScontainer}","page":"References","title":"Base.:*","text":"*(a::MScontainer, b::MScontainer)\n\nMultiplication of mass spectra elementwise.\n\njulia> a * b\nMSJ.MSscans([2, 5], [0.7307, 4.344\n\n\n\n\n\n","category":"method"},{"location":"reference/#Utility-function-1","page":"References","title":"Utility function","text":"","category":"section"},{"location":"reference/#","page":"References","title":"References","text":"MSJ.avg(a::MScontainer, b::MScontainer)\nMSJ.add_ion_current(x::Vector{Float64}, y::Vector{Float64}, a::Float64, b::Float64)\nMSJ.num2pnt(x::Vector{Float64}, val::Real)\nMSJ.savitzky_golay(int::AbstractArray, order::Int, window::Int, deriv::Int)\nMSJ.extremefilt(input::AbstractArray, minmax::Function, region::Int)\nMSJ.morpholaplace(input::AbstractArray, region::Int)\nMSJ.morphogradient(input::AbstractArray, region::Int)\nMSJ.tophat(input::AbstractArray, region::Int)\nMSJ.bottomhat(input::AbstractArray, region::Int) \nMSJ.opening(input::AbstractArray, region::Int)\nMSJ.closing(input::AbstractArray, region::Int)\nMSJ.erosion(input::AbstractArray, region::Int)\nMSJ.dilatation(input::AbstractArray, region::Int)\nMSJ.convolve(a::AbstractArray, b::AbstractArray)","category":"page"},{"location":"reference/#MSJ.avg-Tuple{MSJ.MScontainer,MSJ.MScontainer}","page":"References","title":"MSJ.avg","text":"avg(a::MScontainer, b::MScontainer)\n\nReturns the average of the input mass spectra and compute the variance using an incremental Welford algorithm.\n\njulia> MSJ.avg(scans[1], scans[4])\nMSJ.MSscans([1, 4], [0.1384, 3.7578], ....\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.add_ion_current-Tuple{Array{Float64,1},Array{Float64,1},Float64,Float64}","page":"References","title":"MSJ.add_ion_current","text":"add_ion_current(x::AbstractArray, y::AbstractArray, a::Real, b::Real)\n\nReturns sum the ion current (int) within the m/z range defined by the a and b input values.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.num2pnt-Tuple{Array{Float64,1},Real}","page":"References","title":"MSJ.num2pnt","text":"num2pnt(x::AbstractArray, val::Real)\n\nGeneral purpose utility function used to retrieve the index of an array for which the value is closest to the input.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.savitzky_golay-Tuple{AbstractArray,Int64,Int64,Int64}","page":"References","title":"MSJ.savitzky_golay","text":"savitzky_golay(int::AbstractArray, order::Int, window::Int, deriv::Int)\n\nSavinsky and Golay filter removes high frequency noise from data. Parameters:     int::AbstractArray     order::Int   order of the polynomial     window::Int  length of the window, has to be an odd number     deriv::Int   the order of the derivative to be computed. Default = 0 leads to smoothing only.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.extremefilt-Tuple{AbstractArray,Function,Int64}","page":"References","title":"MSJ.extremefilt","text":"extremefilt(input::AbstractArray, minmax::Function, region::Int)\n\nReturn the erosion or the dilation of the input over the region, which the size of the structuring element.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.morpholaplace-Tuple{AbstractArray,Int64}","page":"References","title":"MSJ.morpholaplace","text":"morpholaplace(input::AbstractArray, region::Int)\n\nPerfoms morphological Laplacian of the input array, as defined by the addition of the dilatation and the erosion of the input array.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.morphogradient-Tuple{AbstractArray,Int64}","page":"References","title":"MSJ.morphogradient","text":"morphogradient(input::AbstractArray, region::Int)\n\nPerfoms morphological Gradient of the input array, defined by the difference between the dilatation and the erosion of the input array.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.tophat-Tuple{AbstractArray,Int64}","page":"References","title":"MSJ.tophat","text":"tophat(input::AbstractArray, region::Int)\n\nPerforms the Top Hat of the input Array, defined by the difference between the input and its morphological opening.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.bottomhat-Tuple{AbstractArray,Int64}","page":"References","title":"MSJ.bottomhat","text":"bottomhat(input::AbstractArray, region::Int)\n\nPerforms the Bottom Hat of the input Array, defined by the difference between the morphological closing of the input and the input.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.opening-Tuple{AbstractArray,Int64}","page":"References","title":"MSJ.opening","text":"opening(input::AbstractArray, region::Int)\n\nPerforms the morphological opening of the input Array, which is the dilatation of the erosion of the input\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.closing-Tuple{AbstractArray,Int64}","page":"References","title":"MSJ.closing","text":"closing(input::AbstractArray, region::Int\n\nPerforms the morphological closing of the input Array, which is defined as the erosion of the dilatation of the input.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.erosion-Tuple{AbstractArray,Int64}","page":"References","title":"MSJ.erosion","text":"erosion(input::AbstractArray, region::Int)\n\nPerforms the morphological erosion of the input, which is the minimum-filtering over the structuring element region.\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.dilatation-Tuple{AbstractArray,Int64}","page":"References","title":"MSJ.dilatation","text":"dilatation(input::AbstractArray, region::Int)\n\nPerforms the morphological dilatation of the input, which is the maximum-filtering over the structuring element region\n\n\n\n\n\n","category":"method"},{"location":"reference/#MSJ.convolve-Tuple{AbstractArray,AbstractArray}","page":"References","title":"MSJ.convolve","text":"convolve(a::AbstractArray, b::AbstractArray)\n\nConvolve arrays a and b using the Fourier transform algorithm.\n\n\n\n\n\n","category":"method"},{"location":"#Home-1","page":"Home","title":"Home","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"MSJ.jl is a package for loading, processing and plotting mass spectrometry data. It provides a range of functionalities such as:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Getting information on the file\nLoad a file\nAveraging mass spectra based on various criteria that may be combined\nChromatogram\nProcessing the data\nsmoothing\nbaseline correction\npeak-picking\nCalculation of isotopic distribution","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The tutorial page shows examples how to use this package and provides a general guide to it. The manual page explains the structure of the package and the reference page gives a full documentation for each type and function.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"There are two ways of installing the package.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> using Pkg ;\njulia> Pkg.add(PackageSpec(url=\"https://github.com/ajgiuliani/MSJ.jl\"))","category":"page"},{"location":"#","page":"Home","title":"Home","text":"or","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> ]\n(v1.1) pkg>  add https://github.com/ajgiuliani/MSJ.jl","category":"page"},{"location":"#Supported-file-format-1","page":"Home","title":"Supported file format","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"mzXML","category":"page"},{"location":"tutorial/#Tutorials-1","page":"Tutorials","title":"Tutorials","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"using Plots","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"The MSJ package intends to provide an access to the common open source mass spectrometry file format using Julia.","category":"page"},{"location":"tutorial/#The-Julia-language-1","page":"Tutorials","title":"The Julia language","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Julia is an open source programming language designed for scientific and technical computing. This section will give a very brief introduction to the Julia language. ","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"note: Note\nSee also the Julia language home page, the Wikibook introduction to Julia or Julia by example.","category":"page"},{"location":"tutorial/#Installation-1","page":"Tutorials","title":"Installation","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Julia binaries are available for various platforms and can be downloaded here.  Plateform specific instructions may be found here.","category":"page"},{"location":"tutorial/#Executing-Julia-code-1","page":"Tutorials","title":"Executing Julia code","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Julia code can be executed interactively using the REPL as follow:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"println(\"Hello\")","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"The println(\"Hello\") line can be put in a file, such as hello.jl and executed as a script, which will produce the same output.","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"$ julia hello.jl","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"You can also put #!/usr/local/bin/julia in the first line of the hello.jl file, make it executable (chmod +x hello.jl) and execute it like any other executable.","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Finally, Julia scripts can be executed within Jupyter Notebooks, see the dedicated section Jupyter notebooks.","category":"page"},{"location":"tutorial/#Types-1","page":"Tutorials","title":"Types","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Julia is a strongly typed language ( see the julia wikibook) In Julia types are organized in a hierarchy with a tree structure. The root of the tree is the Any type.  The Number type is a direct child of Any and possesses two subtypes: Complex and Real. The Real type has four types: Integer, AbstractFloat, Irrational and Rational. The exact number hierarchy is as follow:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Number\n ↳ Complex\n ↳ Real\n    ↳ AbstractFloat \n\t   ↳ BigFloat \n\t   ↳ Float64 \n\t   ↳ Float32 \n\t   ↳ Float16\n    ↳ Integer\n\t   ↳ BigInt\n\t   ↳ Bool\n\t   ↳ Signed\n\t      ↳ Int128 \n\t\t  ↳ Int64 \n\t\t  ↳ Int32 \n\t\t  ↳ Int16 \n\t\t  ↳ Int8\n\t   ↳ Unsigned\n\t      ↳ UInt128 \n\t\t  ↳ Int64 \n\t\t  ↳ UInt32 \n\t\t  ↳ UInt16 \n\t\t  ↳ UInt8\n\t↳ Irrational\n\t↳ Rational","category":"page"},{"location":"tutorial/#Creating-vectors-and-matrices-1","page":"Tutorials","title":"Creating vectors and matrices","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"A vector is created as follow","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"A = [1, 2, 3]                  # vector\nA = range(1, 10, step = 2)   # linearly spaced\nA = range(1, 10, length = 5) # linearly spaced\nA = rand(10)                 # random with 10 elements\nj = 2; k = 2; n = 10;\nA = j:k:n                    # from j to n with step size k","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"and similarly for matrices","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"A = [1 2; 3 4]               # matrix\nA = rand(2, 2)               # random 2x2 matrix","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Vector and matrices can be manipulated as follow:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"transpose(A)                 # Return the transpose of A\nA[:]                         # Flatten matrix A (convert matrix to vector)\nA[2,2]                       # Accessing element at row 2 and colomun 2\nA[1:4, :]                    # Accessing specific rows 1 to 4","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Vector and matrix may be preallocated like this:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"A = rand(5)                  # a vector / matrix\nB = similar(A)               # an emply vector / matrix similar to A","category":"page"},{"location":"tutorial/#Operations-1","page":"Tutorials","title":"Operations","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"The following present a few example of operations:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"julia> dot(A,B)                     # dot product between A and B \njulia> A .* B                       # Element wise multiplication\njulia> A * B                        # Matrix multiplcation\njulia> norm(A)                      # Euclidian norm\njulia> sum(A, dims = 1)             # sum over each column\njulia> sum(A, dims = 2)             # sum over each rows","category":"page"},{"location":"tutorial/#Loops-1","page":"Tutorials","title":"Loops","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"A loop in Julia can be done like this:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"julia> for i in 1:N\njulia>   #do something\njulia> end","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"While loops my be achiçved like this:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"julia> while i <= N\njulia>   #do something\njulia> end","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"and if / else flow like this:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"julia> if i < N\njulia>   #do something\njulia> else \njulia>   #do something else\njulia> end","category":"page"},{"location":"tutorial/#Functions-and-methods-1","page":"Tutorials","title":"Functions and methods","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"A function is defined like this:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"julia> function f(x)\njulia>   return x^2\njulia> end","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"which can be simplified as:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"julia> f(x) = x^2","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Broadcasting a function over a collection or an Array is achieved like this:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"julia> f(x) = x^2\njulia> x = 1:10\njulia> f.(x)","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"In Julia, functions that modify their arguments are named !, such as:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"julia> function f!(out, x)\njulia>   out = x.^2\njulia> end\njulia> x = rand(10)\njulia> y = similar(x)\njulia> f!(y, x)","category":"page"},{"location":"tutorial/#Importing-and-using-Packages-1","page":"Tutorials","title":"Importing and using Packages","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"The Julia code is organized into files, modules and packages. A file using the .jl extension contains julia code. Related functions and variable may be gathered in modules.  One or more modules may be organized into packages. To use a package, it has to be called like this:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"julia> using A_package","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"If it is not installed, before being used:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"julia> using Pkg                      # using the Package manager package\njulia> Pkg.add(\"A_package\")\njulia> using A_package","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Now every public function which is made available by the package A_package is available directly. Private functions have to be called like this: ","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"julia> a_public_function()                   # Calling a public function\njulia> A_package.a_private_function()        # Calling private functions","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"The same is true for the variables defined in the packages.","category":"page"},{"location":"tutorial/#Jupyter-notebooks-1","page":"Tutorials","title":"Jupyter notebooks","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Jupyter notebooks are web based documents that may contains both codes, figures and other textual elements (such as equations, links, ...).  Jupyter notebook may be installed easily using Julia:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"julia> using Pkg\njulia> Pkg.add(\"IJulia\")","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"When IJulia is installed, then a notebook may be launch like this:","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"julia> using IJulia\njulia> notebook()","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"The notebook() function should launch a web browser from which a new notebook  may be started. On each entry of the notebook code, Markdown or text may be inserted. Each line of code may be executed and will eventually return a result. In the following, the tutorials are given in Jupyter notebook form and can be viewed on nbviewer","category":"page"},{"location":"tutorial/#The-MSJ-package-1","page":"Tutorials","title":"The MSJ package","text":"","category":"section"},{"location":"tutorial/#Loading-and-plotting-mass-spectrometry-data-1","page":"Tutorials","title":"Loading and plotting mass spectrometry data","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"This tutorial shows how to use how to import data and how to plot mass spectra.","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Loading and plotting data","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"View HTML export)","category":"page"},{"location":"tutorial/#Filtering-and-averaging-1","page":"Tutorials","title":"Filtering and averaging","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"This notebook shows how to filter and average data.","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Filtering and averaging data","category":"page"},{"location":"tutorial/#Extracting-data-from-several-files-1","page":"Tutorials","title":"Extracting data from several files","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"This tutorial gives an example how to extract UV spectroscpy data from different files containing UV activation at different wavelengths.","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Extracting data from several files","category":"page"},{"location":"tutorial/#Isotopic-distributions-1","page":"Tutorials","title":"Isotopic distributions","text":"","category":"section"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Here we will calculate the isotopic distribution of a compound, simulate a mass spectrum from that distribution and compare this result to experimental data.","category":"page"},{"location":"tutorial/#","page":"Tutorials","title":"Tutorials","text":"Isotopic Distributions","category":"page"}]
}
